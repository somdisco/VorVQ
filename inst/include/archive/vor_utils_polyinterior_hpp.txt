#ifndef VORVQ_UTILS_ANALYTICCENTER_HPP
#define VORVQ_UTILS_ANALYTICCENTER_HPP

#define ARMA_DONT_PRINT_ERRORS
//#ifndef RcppArmadillo_H
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]
//#endif

//#ifndef RcppParallel_H
#include <RcppParallel.h>
// [[Rcpp::depends(RcppParallel)]]
//#endif

// [[Rcpp::plugins(cpp11)]]


#include "vor_utils_parallel.hpp"
#include "vor_utils_polydef.hpp"
#include "vor_utils_gurobi.hpp"

#define USE_RCPP_ARMADILLO
#include "optim.hpp"


namespace VOR_ANALYTICCEENTER {




// ***** Analytic Centers 

// Structure to hold definition of polytope to pass to optimlib 
struct ac_poly_def{
  const arma::mat& A; 
  const arma::vec& b; 
  double penalty_exp; 
  ac_poly_def(const arma::mat& A_, const arma::vec& b_) : A(A_), b(b_) {penalty_exp = 50;}; 
};  

// Objective function for analytic center optimization 
inline double cpp_ac_obj_hess(const arma::vec& x, arma::vec* grad, arma::mat* hess, void* opt_data) {
  
  // Parse the polytope data and the exponential penalty term 
  // This also contains the exponent term for the interior barrier penalty, set this term = 0 to disable
  ac_poly_def* poly_data = reinterpret_cast<ac_poly_def*>(opt_data);
  double alpha = poly_data->penalty_exp; 
  
  // Compute objective value 
  arma::vec slacks = poly_data->b - poly_data->A * x;
  arma::vec eslacks; 
  double objval = -arma::accu(arma::log(slacks));
  if(alpha > 0) {
    eslacks = arma::exp(-alpha * slacks); 
    objval += arma::accu(arma::log(1 + eslacks));
  } 
  
  unsigned int M = poly_data->A.n_rows; 
  
  // Compute gradient 
  if(grad) {
    grad->zeros(); 
    for(unsigned int i=0; i<M; ++i) {
      *grad += poly_data->A.row(i).t() / slacks(i); 
      if(!(alpha > 0)) continue; 
      *grad += alpha * poly_data->A.row(i).t() * eslacks(i) / (1 + eslacks(i)); 
    }
  }
  
  // Compute Hessian 
  if(hess) {
    *hess = poly_data->A.t();
    hess->each_row() /= arma::pow(slacks.t(), 2.0); 
    *hess *= poly_data->A; 
    if(alpha > 0) {
      for(unsigned int i=0; i<M; ++i) {
        *hess += alpha * alpha * poly_data->A.row(i).t() * poly_data->A.row(i) * eslacks(i) / std::pow(1 + eslacks(i), 2.0); 
      }
    }
  }
  
  return objval; 
}

inline double cpp_ac_obj_grad(const arma::vec& x, arma::vec* grad, void* opt_data) {
  return cpp_ac_obj_hess(x, grad, nullptr, opt_data); 
}

inline bool cpp_polytope_analytic_center(arma::vec& x, const arma::mat& A, const arma::vec& b, std::string method = "cg") {
  
  ac_poly_def pd(A,b); 
  
  //optim::algo_settings_t settings;
  //settings.iter_max = 10000; 
  //settings.err_tol = 1e-4; 
  
  bool success = false; 
  if(method=="bfgs") {
    success = optim::bfgs(x, cpp_ac_obj_grad, &pd); 
  } else if(method=="lbfgs") {
    success = optim::lbfgs(x, cpp_ac_obj_grad, &pd); 
  } else if(method=="newton") {
    success = optim::newton(x, cpp_ac_obj_hess, &pd);
  } else if(method=="nm") {
    success = optim::nm(x, cpp_ac_obj_grad, &pd);
  } else if(method=="cg") {
    success = optim::cg(x, cpp_ac_obj_grad, &pd);
  }
  
  return success; 
}

// Parallel worker to compute analytic Centers for each First-Order Voronoi cell
struct vor1_analytic_center_prlwkr : RcppParallel::Worker {
  
  // Inputs
  const arma::mat& W;
  const arma::umat& polydef_ADJ;
  const arma::uvec& i_list; // i_list denotes the idx (in W) of the Vor.cell we compute interior points for 
  const arma::vec& xlb; const arma::vec& xub;
  const arma::mat& X0; // starting interior points, required 
  
  // Internal variables
  unsigned int nprocess, d;
  
  
  // Outputs
  arma::mat C; // matrix of analytic centers, one row per element of i_list 
  
  vor1_analytic_center_prlwkr(const arma::mat& W_, const arma::umat& polydef_ADJ,
                              const arma::uvec& i_list_, const arma::vec& xlb_, const arma::vec& xub_, const arma::mat& X0_) :
    W(W_), polydef_ADJ(polydef_ADJ), i_list(i_list_), xlb(xlb_), xub(xub_), X0(X0_) {
    
    // Set sizes & perform additional checks
    nprocess = i_list.size(), d = W.n_cols;
    
    // Setup working container
    C.set_size(nprocess, d);
  }
  
  
  // Function to compute the interior point for a single Vor1 Cell 
  // defined by i_list[i]
  void single_vor1_analytic(unsigned int i) {
    
    // First obtain the polytope definition of this 1st-Order cell, with Delaunay restriction & global bounds
    arma::mat A; arma::vec b; arma::uvec cid;
    VOR_POLYDEF::cpp_vor1_polytope(W, polydef_ADJ, i_list(i), xlb, xub, A, b, cid);
    
    // Determine the interior point 
    arma::vec tmpx = X0.row(i).t(); 
    bool success = cpp_polytope_analytic_center(tmpx, A, b, "newton");
    
    // below is just to trick the compiler into ignore the unused "success" return variable 
    if(success) {
      C.row(i) = tmpx.t(); 
    } else {
      C.row(i) = tmpx.t(); 
    }
  }
  
  // Parallel operator
  void operator()(std::size_t begin, std::size_t end) {
    
    for(unsigned int i = begin; i < end; i++) {
      
      single_vor1_analytic(i);
      
    } // close loop vor1 cells
  } // close worker
  
  
  void calc_parallel_progress() {
    
    // nprocess = length(i_list), set during constructor
    
    // log start time 
    auto starttime = std::chrono::high_resolution_clock::now(); 
    
    // initialize chunk variables 
    unsigned int chunk_size = nprocess / 10; 
    chunk_size = std::max(chunk_size, VOR_PARALLEL::get_NumThreads_RcppParallel());
    chunk_size = std::min(chunk_size, nprocess); 
    unsigned int chunk_counter = 0; 
    unsigned int ncompleted = 0; 
    Rcpp::Rcout << "Calculating analytic centers for vor1 cells ..." << std::endl; 
    
    // loop over chunks
    while(ncompleted < nprocess) {
      // Check for abort 
      Rcpp::checkUserInterrupt(); 
      
      unsigned int from = chunk_counter * chunk_size; 
      unsigned int to = from + chunk_size; 
      to = std::min(to, nprocess); 
      
      RcppParallel::parallelFor(from, to, *this); 
      
      ncompleted += to - from; 
      
      chunk_counter++; 
      
      Rcpp::Rcout << int(double(ncompleted)/double(nprocess)*100) << "%";
      if(ncompleted == nprocess || chunk_counter % 8 == 0) {
        Rcpp::Rcout << std::endl;
      } else {
        Rcpp::Rcout << "\t";
      }
    } // close while 
    
    // log end time, print execution time 
    auto stoptime = std::chrono::high_resolution_clock::now();
    auto exectime = std::chrono::duration<float, std::ratio<60>>(stoptime - starttime); 
    Rcpp::Rcout << "Computation time: " << exectime.count() << " minutes" << std::endl;
  }
  
  
  void calc_serial() {
    
    // log start time 
    auto starttime = std::chrono::high_resolution_clock::now(); 
    
    Rcpp::Rcout << "Calculating analytic centers for vor1 cells ..." << std::endl; 
    
    unsigned int chunk_counter = 0;
    for(int i=0; i<nprocess; ++i) {
      
      // Check for abort 
      Rcpp::checkUserInterrupt(); 
      
      single_vor1_analytic(i);
      chunk_counter++; 
      
      //Rcpp::Rcout << "success" << std::endl;
      Rcpp::Rcout << i_list(i)+1; 
      
      if(i == (nprocess-1) || chunk_counter % 8 == 0) {
        Rcpp::Rcout << std::endl;
      } else {
        Rcpp::Rcout << "\t";
      }
      
    } // close loop over cells
    
    // log end time, print execution time 
    auto stoptime = std::chrono::high_resolution_clock::now();
    auto exectime = std::chrono::duration<float, std::ratio<60>>(stoptime - starttime); 
    Rcpp::Rcout << "Computation time: " << exectime.count() << " minutes" << std::endl;
    
  } // close solver function
};

// Parallel worker to compute analytic Centers for each Second-Order Voronoi cell
struct vor2_analytic_center_prlwkr : RcppParallel::Worker {
  
  // Inputs
  const arma::mat& W;
  const arma::umat& polydef_ADJ;
  const arma::umat& ij_list; // rows of ij_list denote the idxs (in W) of the 2nd order Vor.cell we compute interior points for 
  const arma::vec& xlb; const arma::vec& xub;
  const arma::mat& X0; // starting interior points, required 
  
  // Internal variables
  unsigned int nprocess, d;
  
  
  // Outputs
  arma::mat C; // matrix of analytic centers, one row per element of i_list 
  
  vor2_analytic_center_prlwkr(const arma::mat& W_, const arma::umat& polydef_ADJ,
                              const arma::umat& ij_list_, const arma::vec& xlb_, const arma::vec& xub_, const arma::mat& X0_) :
    W(W_), polydef_ADJ(polydef_ADJ), ij_list(ij_list_), xlb(xlb_), xub(xub_), X0(X0_) {
    
    // Set sizes & perform additional checks
    nprocess = ij_list.n_rows, d = W.n_cols;
    
    // Setup working container
    C.set_size(nprocess, d);
  }
  
  
  // Function to compute the interior point for a single Vor2 Cell 
  // defined by ij_list[i,]
  void single_vor2_analytic(unsigned int i) {
    
    // First obtain the polytope definition of this 2nd Order cell, with Delaunay restriction & global bounds
    arma::mat A; arma::vec b; arma::uvec cid;
    VOR_POLYDEF::cpp_vor2_polytope(W, polydef_ADJ, ij_list(i,0), ij_list(i,1), xlb, xub, A, b, cid);
    
    // Determine the interior point 
    arma::vec tmpx = X0.row(i).t(); 
    bool success = cpp_polytope_analytic_center(tmpx, A, b, "newton");
    
    // below is just to trick the compiler into ignore the unused "success" return variable 
    if(success) {
      C.row(i) = tmpx.t(); 
    } else {
      C.row(i) = tmpx.t(); 
    }  
  }
  
  // Parallel operator
  void operator()(std::size_t begin, std::size_t end) {
    
    for(unsigned int i = begin; i < end; i++) {
      
      single_vor2_analytic(i);
      
    } // close loop vor2 cells
  } // close worker
  
  void calc_parallel_progress() {
    
    // nprocess = length(i_list), set during constructor
    
    // log start time 
    auto starttime = std::chrono::high_resolution_clock::now(); 
    
    // initialize chunk variables 
    unsigned int chunk_size = nprocess / 10; 
    chunk_size = std::max(chunk_size, VOR_PARALLEL::get_NumThreads_RcppParallel());
    chunk_size = std::min(chunk_size, nprocess); 
    unsigned int chunk_counter = 0; 
    unsigned int ncompleted = 0; 
    Rcpp::Rcout << "Calculating analytic centers for vor2 cells ..." << std::endl; 
    
    // loop over chunks
    while(ncompleted < nprocess) {
      // Check for abort 
      Rcpp::checkUserInterrupt(); 
      
      unsigned int from = chunk_counter * chunk_size; 
      unsigned int to = from + chunk_size; 
      to = std::min(to, nprocess); 
      
      RcppParallel::parallelFor(from, to, *this); 
      
      ncompleted += to - from; 
      
      chunk_counter++; 
      
      Rcpp::Rcout << int(double(ncompleted)/double(nprocess)*100) << "%";
      if(ncompleted == nprocess || chunk_counter % 8 == 0) {
        Rcpp::Rcout << std::endl;
      } else {
        Rcpp::Rcout << "\t";
      }
    } // close while 
    
    // log end time, print execution time 
    auto stoptime = std::chrono::high_resolution_clock::now();
    auto exectime = std::chrono::duration<float, std::ratio<60>>(stoptime - starttime); 
    Rcpp::Rcout << "Computation time: " << exectime.count() << " minutes" << std::endl;
  }
  
  void calc_serial() {
    
    // log start time 
    auto starttime = std::chrono::high_resolution_clock::now(); 
    
    Rcpp::Rcout << "Calculating analytic centers for vor2 cells ..." << std::endl; 
    
    unsigned int chunk_counter = 0;
    for(int i=0; i<nprocess; ++i) {
      
      // Check for abort 
      Rcpp::checkUserInterrupt(); 
      
      single_vor2_analytic(i);
      chunk_counter++; 
      
      //Rcpp::Rcout << "success" << std::endl;
      Rcpp::Rcout << i+1; 
      
      if(i == (nprocess-1) || chunk_counter % 8 == 0) {
        Rcpp::Rcout << std::endl;
      } else {
        Rcpp::Rcout << "\t";
      }
      
    } // close loop over cells
    
    // log end time, print execution time 
    auto stoptime = std::chrono::high_resolution_clock::now();
    auto exectime = std::chrono::duration<float, std::ratio<60>>(stoptime - starttime); 
    Rcpp::Rcout << "Computation time: " << exectime.count() << " minutes" << std::endl;
    
  } // close solver function
  
};



}

#endif



/* ***** Analytic Centers - GUROBI (accurate, but slow)
// stanford.edu/class/ee364b/lectures/accpm_slides.pdf
inline arma::vec cpp_polytope_analytic_center(GRBEnv* env, const arma::mat& A, const arma::vec& b, bool verbose) {
  // A and b are assumed to represent the half-plane system WITH BOUNDS APPENDED 
  
  // Strip out dimensions of polytope
  int M = A.n_rows, N = A.n_cols;
  // Initialize output 
  arma::vec center(N); center.zeros();
  
  
  try{
    
    // Initialize a Gurobi model
    GRBModel model = GRBModel(*env);
    if(!verbose) model.getEnv().set(GRB_IntParam_OutputFlag, 0); // Turn off
    std::vector<GRBVar> x(N+(2*M));
    
    // Add the "y" variables, set all objective coefficients to 0 to start
    for(int n=0; n<N; ++n) {
      x[n] = model.addVar(-GRB_INFINITY, GRB_INFINITY, 0.0, GRB_CONTINUOUS, "x"+std::to_string(n)); //
    }
    for(int m=0; m<M; ++m) {
      x[N+m] = model.addVar(0, GRB_INFINITY, 0.0, GRB_CONTINUOUS, "x"+std::to_string(N+m)); //
    }
    for(int m=0; m<M; ++m) {
      x[N+M+m] = model.addVar(-GRB_INFINITY, GRB_INFINITY, -1.0, GRB_CONTINUOUS, "x"+std::to_string(N+M+m)); //
    }
    
    
    
    // Add the Polytope constraints 
    for(int m=0; m<M; ++m) {
      // Add the linear constraints
      GRBLinExpr constr = 0.0; // Initialize this linear constraint Aix <= bi   
      for(int n=0; n<N; ++n) {
        constr += A(m,n) * x[n]; // Fill up constraint i
      }
      // Add the constraint we built above
      model.addConstr(constr, GRB_LESS_EQUAL, b(m), "c"+std::to_string(m));
      
      constr *= -1.0; 
      constr += b(m); 
      model.addConstr(constr, GRB_EQUAL, x[N+m]);
      
      model.addGenConstrLog(x[N+m], x[N+M+m]);
    }
    
    // The objective is to maximize each slack 
    model.set(GRB_IntAttr_ModelSense, GRB_MAXIMIZE);
    
    // Solve the model
    model.optimize();
    
    // Check if model wasn't solved.  If not, continue
    if(model.get(GRB_IntAttr_Status) == GRB_OPTIMAL) {
      for(int n=0; n<N; ++n) {
        center(n) += x[n].get(GRB_DoubleAttr_X);
      }
    }
    
  }
  catch (GRBException e)
  {
    if(verbose) {
      Rcpp::Rcout << "Error code = " << e.getErrorCode() << std::endl;
      Rcpp::Rcout << e.getMessage() << std::endl;
    }
  }
  catch (...)
  {
    if(verbose) {
      Rcpp::Rcout << "Exception during optimization" << std::endl;
    }
  }
  
  
  // Return the center.
  return center;    
}

// Parallel worker to compute analytic Centers for each First-Order Voronoi cell
struct vor1_analytic_center_prlwkr : RcppParallel::Worker {
  
  // Inputs
  const arma::mat& W;
  const arma::umat& polydef_ADJ;
  const arma::uvec& i_list; // i_list denotes the idx (in W) of the Vor.cell we compute interior points for 
  const arma::vec& xlb; const arma::vec& xub;
  
  // Internal variables
  unsigned int nprocess, d;
  GRBEnv* env;
  
  
  // Outputs
  arma::mat X0; // matrix of analytic centers, one row per element of i_list 
  
  vor1_analytic_center_prlwkr(const arma::mat& W_, const arma::umat& polydef_ADJ,
                              const arma::uvec& i_list_, const arma::vec& xlb_, const arma::vec& xub_) :
    W(W_), polydef_ADJ(polydef_ADJ), i_list(i_list_), xlb(xlb_), xub(xub_) {
    
    // Set sizes & perform additional checks
    nprocess = i_list.size(), d = W.n_cols;
    
    // Setup working container
    X0.set_size(nprocess, d);
    
    // Initialize a Gurobi environment
    FILE* mystdout = stdout;
    stdout = fopen("/dev/null", "w");
    std::fclose(stdout);
    env = new GRBEnv();
    stdout = mystdout;
  }
  
  
  // Function to compute the interior point for a single Vor1 Cell 
  // defined by i_list[i]
  void single_vor1_analytic(unsigned int i) {
    
    // First obtain the polytope definition of this 1st-Order cell, with Delaunay restriction & global bounds
    arma::mat A; arma::vec b; arma::uvec cid;
    VOR_POLYDEF::cpp_vor1_polytope(W, polydef_ADJ, i_list(i), xlb, xub, A, b, cid);
    
    // Determine the interior point 
    arma::vec tmp = cpp_polytope_analytic_center(env, A, b, false);
    
    // Store it 
    X0.row(i) = tmp.t(); 
  }
  
  // Parallel operator
  void operator()(std::size_t begin, std::size_t end) {
    
    for(unsigned int i = begin; i < end; i++) {
      
      single_vor1_analytic(i);
      
    } // close loop vor1 cells
  } // close worker
  
  
  void calc_parallel_progress() {
    
    // nprocess = length(i_list), set during constructor
    
    // log start time 
    auto starttime = std::chrono::high_resolution_clock::now(); 
    
    // initialize chunk variables 
    unsigned int chunk_size = nprocess / 10; 
    chunk_size = std::max(chunk_size, VOR_PARALLEL::get_NumThreads_RcppParallel());
    chunk_size = std::min(chunk_size, nprocess); 
    unsigned int chunk_counter = 0; 
    unsigned int ncompleted = 0; 
    Rcpp::Rcout << "Calculating analytic centers for vor1 cells ..." << std::endl; 
    
    // loop over chunks
    while(ncompleted < nprocess) {
      // Check for abort 
      Rcpp::checkUserInterrupt(); 
      
      unsigned int from = chunk_counter * chunk_size; 
      unsigned int to = from + chunk_size; 
      to = std::min(to, nprocess); 
      
      RcppParallel::parallelFor(from, to, *this); 
      
      ncompleted += to - from; 
      
      chunk_counter++; 
      
      Rcpp::Rcout << int(double(ncompleted)/double(nprocess)*100) << "%";
      if(ncompleted == nprocess || chunk_counter % 8 == 0) {
        Rcpp::Rcout << std::endl;
      } else {
        Rcpp::Rcout << "\t";
      }
    } // close while 
    
    // log end time, print execution time 
    auto stoptime = std::chrono::high_resolution_clock::now();
    auto exectime = std::chrono::duration<float, std::ratio<60>>(stoptime - starttime); 
    Rcpp::Rcout << "Computation time: " << exectime.count() << " minutes" << std::endl;
  }
  
  
  void calc_serial() {
    
    // log start time 
    auto starttime = std::chrono::high_resolution_clock::now(); 
    
    Rcpp::Rcout << "Calculating analytic centers for vor1 cells ..." << std::endl; 
    
    unsigned int chunk_counter = 0;
    for(int i=0; i<nprocess; ++i) {
      
      // Check for abort 
      Rcpp::checkUserInterrupt(); 
      
      single_vor1_analytic(i);
      chunk_counter++; 
      
      //Rcpp::Rcout << "success" << std::endl;
      Rcpp::Rcout << i_list(i)+1; 
      
      if(i == (nprocess-1) || chunk_counter % 8 == 0) {
        Rcpp::Rcout << std::endl;
      } else {
        Rcpp::Rcout << "\t";
      }
      
    } // close loop over cells
    
    // log end time, print execution time 
    auto stoptime = std::chrono::high_resolution_clock::now();
    auto exectime = std::chrono::duration<float, std::ratio<60>>(stoptime - starttime); 
    Rcpp::Rcout << "Computation time: " << exectime.count() << " minutes" << std::endl;
    
  } // close solver function
};

// Parallel worker to compute analytic Centers for each Second-Order Voronoi cell
struct vor2_analytic_center_prlwkr : RcppParallel::Worker {
  
  // Inputs
  const arma::mat& W;
  const arma::umat& polydef_ADJ;
  const arma::umat& ij_list; // rows of ij_list denote the idxs (in W) of the 2nd order Vor.cell we compute interior points for 
  const arma::vec& xlb; const arma::vec& xub;
  
  // Internal variables
  unsigned int nprocess, d;
  GRBEnv* env;
  
  
  // Outputs
  arma::mat X0; // matrix of analytic centers, one row per element of i_list 
  
  vor2_analytic_center_prlwkr(const arma::mat& W_, const arma::umat& polydef_ADJ,
                              const arma::umat& ij_list_, const arma::vec& xlb_, const arma::vec& xub_) :
    W(W_), polydef_ADJ(polydef_ADJ), ij_list(ij_list_), xlb(xlb_), xub(xub_) {
    
    // Set sizes & perform additional checks
    nprocess = ij_list.n_rows, d = W.n_cols;
    
    // Setup working container
    X0.set_size(nprocess, d);
    
    // Initialize a Gurobi environment
    FILE* mystdout = stdout;
    stdout = fopen("/dev/null", "w");
    std::fclose(stdout);
    env = new GRBEnv();
    stdout = mystdout;
  }
  
  
  // Function to compute the interior point for a single Vor2 Cell 
  // defined by ij_list[i,]
  void single_vor2_analytic(unsigned int i) {
    
    // First obtain the polytope definition of this 2nd Order cell, with Delaunay restriction & global bounds
    arma::mat A; arma::vec b; arma::uvec cid;
    VOR_POLYDEF::cpp_vor2_polytope(W, polydef_ADJ, ij_list(i,0), ij_list(i,1), xlb, xub, A, b, cid);
    
    // Determine the interior point 
    arma::vec tmp = cpp_polytope_analytic_center(env, A, b, false);
    
    // Store it 
    X0.row(i) = tmp.t(); 
  }
  
  // Parallel operator
  void operator()(std::size_t begin, std::size_t end) {
    
    for(unsigned int i = begin; i < end; i++) {
      
      single_vor2_analytic(i);
      
    } // close loop vor2 cells
  } // close worker
  
  void calc_parallel_progress() {
    
    // nprocess = length(i_list), set during constructor
    
    // log start time 
    auto starttime = std::chrono::high_resolution_clock::now(); 
    
    // initialize chunk variables 
    unsigned int chunk_size = nprocess / 10; 
    chunk_size = std::max(chunk_size, VOR_PARALLEL::get_NumThreads_RcppParallel());
    chunk_size = std::min(chunk_size, nprocess); 
    unsigned int chunk_counter = 0; 
    unsigned int ncompleted = 0; 
    Rcpp::Rcout << "Calculating analytic centers for vor2 cells ..." << std::endl; 
    
    // loop over chunks
    while(ncompleted < nprocess) {
      // Check for abort 
      Rcpp::checkUserInterrupt(); 
      
      unsigned int from = chunk_counter * chunk_size; 
      unsigned int to = from + chunk_size; 
      to = std::min(to, nprocess); 
      
      RcppParallel::parallelFor(from, to, *this); 
      
      ncompleted += to - from; 
      
      chunk_counter++; 
      
      Rcpp::Rcout << int(double(ncompleted)/double(nprocess)*100) << "%";
      if(ncompleted == nprocess || chunk_counter % 8 == 0) {
        Rcpp::Rcout << std::endl;
      } else {
        Rcpp::Rcout << "\t";
      }
    } // close while 
    
    // log end time, print execution time 
    auto stoptime = std::chrono::high_resolution_clock::now();
    auto exectime = std::chrono::duration<float, std::ratio<60>>(stoptime - starttime); 
    Rcpp::Rcout << "Computation time: " << exectime.count() << " minutes" << std::endl;
  }
  
  void calc_serial() {
    
    // log start time 
    auto starttime = std::chrono::high_resolution_clock::now(); 
    
    Rcpp::Rcout << "Calculating analytic centers for vor2 cells ..." << std::endl; 
    
    unsigned int chunk_counter = 0;
    for(int i=0; i<nprocess; ++i) {
      
      // Check for abort 
      Rcpp::checkUserInterrupt(); 
      
      single_vor2_analytic(i);
      chunk_counter++; 
      
      //Rcpp::Rcout << "success" << std::endl;
      Rcpp::Rcout << i+1; 
      
      if(i == (nprocess-1) || chunk_counter % 8 == 0) {
        Rcpp::Rcout << std::endl;
      } else {
        Rcpp::Rcout << "\t";
      }
      
    } // close loop over cells
    
    // log end time, print execution time 
    auto stoptime = std::chrono::high_resolution_clock::now();
    auto exectime = std::chrono::duration<float, std::ratio<60>>(stoptime - starttime); 
    Rcpp::Rcout << "Computation time: " << exectime.count() << " minutes" << std::endl;
    
  } // close solver function
  
};
 
END GUROBI ANALYTIC CENTERS */ 
